const fs = require('fs-extra');
const path = require('path');

/**
 * Generate genesis.json configuration for the subnet
 */
function generateGenesisConfig(config) {
    const { basic, network, token, validator } = config;
    
    const genesisConfig = {
        config: {
            chainId: parseInt(network.chainId),
            homesteadBlock: 0,
            eip150Block: 0,
            eip150Hash: "0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0",
            eip155Block: 0,
            eip158Block: 0,
            byzantiumBlock: 0,
            constantinopleBlock: 0,
            petersburgBlock: 0,
            istanbulBlock: 0,
            muirGlacierBlock: 0,
            subnetEVMTimestamp: 0
        },
        nonce: "0x0",
        timestamp: "0x0",
        extraData: "0x",
        gasLimit: "0x7A1200",
        difficulty: "0x0",
        mixHash: "0x0000000000000000000000000000000000000000000000000000000000000000",
        coinbase: "0x0000000000000000000000000000000000000000",
        alloc: {},
        number: "0x0",
        gasUsed: "0x0",
        parentHash: "0x0000000000000000000000000000000000000000000000000000000000000000"
    };

    // Add initial token allocation if SubnetEVM
    if (basic.vmType === 'SubnetEVM' && token.initialSupply) {
        const initialSupplyWei = (parseFloat(token.initialSupply) * Math.pow(10, parseInt(token.decimals || 18))).toString(16);
        
        // Default allocation address (can be customized)
        genesisConfig.alloc = {
            "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC": {
                balance: `0x${initialSupplyWei}`
            }
        };
    }

    // Add fee configuration if enabled
    if (network.enableGasFeatures) {
        genesisConfig.config.feeConfig = {
            gasLimit: 15000000,
            targetBlockRate: 2,
            minBaseFee: 25000000000,
            targetGas: 15000000,
            baseFeeChangeDenominator: 36,
            minBlockGasCost: 0,
            maxBlockGasCost: 1000000,
            blockGasCostStep: 200000
        };
    }

    return genesisConfig;
}

/**
 * Generate subnet-config.json for subnet parameters
 */
function generateSubnetConfig(config) {
    const { basic, network, validator } = config;
    
    return {
        name: basic.subnetName,
        vm: basic.vmType,
        genesis: "genesis.json",
        chainId: parseInt(network.chainId),
        subnet: {
            threshold: Math.max(1, Math.floor(parseInt(validator.maxValidators) * 0.6))
        },
        validators: {
            minValidators: parseInt(validator.minValidators),
            maxValidators: parseInt(validator.maxValidators),
            minStake: parseFloat(validator.minStake),
            maxStakeDuration: parseInt(validator.maxStakeDuration),
            minStakeDuration: 86400, // 1 day minimum
            maxDelegationFee: 1000000, // 100%
            minDelegationFee: 20000,   // 2%
            minDelegatorStake: 25,     // 25 AVAX
            maxValidatorWeightFactor: 5
        }
    };
}

/**
 * Generate deployment script for the subnet
 */
function generateDeploymentScript(config) {
    const { basic, deployment } = config;
    
    let script = `#!/bin/bash

# Avalanche Subnet Deployment Script
# Generated by Avalanche Subnet Wizard
# Subnet: ${basic.subnetName}

set -e

echo "🏔️  Deploying ${basic.subnetName} subnet..."
echo "Target: ${deployment.deploymentTarget}"
echo ""

# Check if Avalanche CLI is installed
if ! command -v avalanche &> /dev/null; then
    echo "❌ Avalanche CLI not found. Please install it first:"
    echo "curl -sSfL https://raw.githubusercontent.com/ava-labs/avalanche-cli/main/scripts/install.sh | sh -s"
    exit 1
fi

# Create subnet
echo "📋 Creating subnet configuration..."
`;

    if (deployment.deploymentTarget === 'local') {
        script += `
# Deploy to local network
echo "🚀 Deploying to local network..."
avalanche subnet create ${basic.subnetName} --genesis genesis.json --vm SubnetEVM

echo "⚡ Starting local network..."
avalanche network start

echo "🌐 Deploying subnet to local network..."
avalanche subnet deploy ${basic.subnetName} --local

echo "✅ Deployment completed!"
echo ""
echo "📊 Network Information:"
avalanche subnet status ${basic.subnetName} --local
`;
    } else if (deployment.deploymentTarget === 'fuji') {
        script += `
# Deploy to Fuji testnet
echo "🚀 Deploying to Fuji testnet..."
avalanche subnet create ${basic.subnetName} --genesis genesis.json --vm SubnetEVM

echo "🌐 Deploying subnet to Fuji..."
avalanche subnet deploy ${basic.subnetName} --fuji

echo "✅ Deployment completed!"
echo ""
echo "📊 Network Information:"
avalanche subnet status ${basic.subnetName} --fuji
`;
    } else if (deployment.deploymentTarget === 'mainnet') {
        script += `
# Deploy to mainnet
echo "⚠️  MAINNET DEPLOYMENT - This will cost real AVAX!"
read -p "Are you sure you want to proceed? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled."
    exit 1
fi

echo "🚀 Deploying to mainnet..."
avalanche subnet create ${basic.subnetName} --genesis genesis.json --vm SubnetEVM

echo "🌐 Deploying subnet to mainnet..."
avalanche subnet deploy ${basic.subnetName} --mainnet

echo "✅ Deployment completed!"
echo ""
echo "📊 Network Information:"
avalanche subnet status ${basic.subnetName} --mainnet
`;
    }

    if (deployment.autoStart) {
        script += `
echo ""
echo "🔄 Auto-starting subnet services..."
# Additional startup commands can be added here
`;
    }

    if (deployment.enableMonitoring) {
        script += `
echo ""
echo "📊 Starting monitoring dashboard..."
echo "Dashboard will be available at: http://localhost:3000"
echo "API server will be available at: http://localhost:5000"
echo ""
echo "To start monitoring manually:"
echo "  cd .. && npm run dev"
`;
    }

    script += `
echo ""
echo "🎉 ${basic.subnetName} subnet deployment completed!"
echo ""
echo "📖 Next steps:"
echo "  1. Add validators to secure your subnet"
echo "  2. Deploy smart contracts"
echo "  3. Start building your dApp!"
echo ""
echo "📚 Useful commands:"
echo "  avalanche subnet list"
echo "  avalanche subnet status ${basic.subnetName}"
echo "  avalanche subnet describe ${basic.subnetName}"
`;

    return script;
}

/**
 * Generate Avalanche CLI configuration
 */
function generateAvalancheCLIConfig(config) {
    const { basic, network } = config;
    
    return {
        subnet: {
            name: basic.subnetName,
            chainId: network.chainId,
            vm: basic.vmType
        }
    };
}

/**
 * Validate and prepare configuration files
 */
function validateConfiguration(config) {
    const errors = [];
    
    // Basic validation
    if (!config.basic.subnetName || config.basic.subnetName.length < 3) {
        errors.push('Subnet name must be at least 3 characters long');
    }
    
    if (!config.network.chainId || isNaN(config.network.chainId)) {
        errors.push('Chain ID must be a valid number');
    }
    
    if (config.basic.vmType === 'SubnetEVM' && config.token.tokenSymbol && config.token.tokenSymbol.length > 6) {
        errors.push('Token symbol must be 6 characters or less');
    }
    
    if (parseInt(config.validator.minValidators) > parseInt(config.validator.maxValidators)) {
        errors.push('Minimum validators cannot be greater than maximum validators');
    }
    
    return errors;
}

module.exports = {
    generateGenesisConfig,
    generateSubnetConfig,
    generateDeploymentScript,
    generateAvalancheCLIConfig,
    validateConfiguration
};
